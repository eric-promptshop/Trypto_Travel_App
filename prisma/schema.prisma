generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          String    @default("USER")
  emailVerified DateTime?
  tenantId      String?   @default("default")
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  trips         Trip[]
  tenant        Tenant?        @relation(fields: [tenantId], references: [id])
  authoredContent TenantContent[]
  auditLogs     AuditLog[]

  @@index([tenantId])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String   @unique
  isActive    Boolean  @default(true)
  settings    Json?    // Store theme, billing, features, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  leads       Lead[]
  content     TenantContent[]
  itineraries Itinerary[]
  auditLogs   AuditLog[]

  @@map("tenants")
}

model Trip {
  id          String   @id @default(cuid())
  title       String
  destination String
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  travelers   Int      @default(1)
  itinerary   String?  // JSON as string
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trips")
}

model Lead {
  id            String   @id @default(cuid())
  email         String
  name          String?
  phone         String?
  destination   String
  startDate     DateTime?
  endDate       DateTime?
  travelers     Int
  budgetMin     Float
  budgetMax     Float
  interests     String   // JSON array as string
  tripData      String   // JSON as string
  itinerary     String?  // JSON as string
  score         Int      @default(0)
  status        String   @default("new")
  crmSyncStatus String?
  crmSyncedAt   DateTime?
  tenantId      String   @default("default")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([email])
  @@index([status])
  @@index([tenantId])
  @@map("leads")
}

model Content {
  id          String   @id @default(cuid())
  type        String   // accommodation, activity, transport, destination
  name        String
  description String
  location    String
  city        String?
  country     String?
  price       Float?
  currency    String   @default("USD")
  duration    Int?     // in minutes
  images      String   // JSON array as string
  amenities   String?  // JSON array as string
  highlights  String?  // JSON array as string
  included    String?  // JSON array as string
  excluded    String?  // JSON array as string
  metadata    String?  // JSON as string
  tenantId    String   @default("default")
  active      Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([location])
  @@index([tenantId])
  @@map("content")
}

model TenantContent {
  id          String   @id @default(cuid())
  contentType String   // page, theme, setting, deployment
  title       String
  content     Json?    // Store actual content
  status      String   @default("draft")
  category    String?
  metadata    Json?
  tenantId    String
  authorId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  author      User?    @relation(fields: [authorId], references: [id])

  @@index([tenantId])
  @@index([contentType])
  @@index([status])
  @@map("tenant_content")
}

model Itinerary {
  id          String   @id @default(cuid())
  title       String
  description String?
  destination String
  startDate   DateTime
  endDate     DateTime
  travelers   Int
  totalPrice  Float?
  currency    String   @default("USD")
  days        String   // JSON array of day plans
  metadata    String?  // JSON as string
  leadId      String?
  userId      String?
  tenantId    String   @default("default")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([leadId])
  @@index([userId])
  @@index([tenantId])
  @@map("itineraries")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  resource    String
  resourceId  String
  tenantId    String
  userId      String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([tenantId])
  @@index([userId])
  @@index([resourceId])
  @@index([createdAt])
  @@map("audit_logs")
}